//==============================================================================
graph AdditiveSynth  [[ main ]]
{
    input event soul::midi::Message midiIn;
    input harmonicMix.mixIn;
    input harmonicMix.slopeIn;
    input event float envelopeRate [[ name: "Envelope Rate", min: 0.1, max: 4.0, init: 1.0, step: 0.01 ]];
    input event float envelopeLoopStart [[ name: "Envelope Loop Start", min: 0.0, max: 1.0, init: 1.0, step: 0.01 ]];
    input event float envelopeLoopEnd [[ name: "Envelope Loop End", min: 0.0, max: 1.0, init: 1.0, step: 0.01 ]];

    output stream float audioOut;

    let
    {
        voices = Voice[8];
        voiceAllocator = soul::voice_allocators::Basic(8);
        harmonicMix = HarmonicMix (${HARMONICS});
    }

    connection
    {
        midiIn -> soul::midi::MPEParser -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.noteOn,
                                        voices.noteOff,
                                        voices.pitchBend;

        // Sum the voices audio out to the output
        voices       -> audioOut;

        harmonicMix -> voices.hamonicMix;

        envelopeRate -> voices.envelopeRate;
        envelopeLoopStart -> voices.envelopeLoopStart;
        envelopeLoopEnd -> voices.envelopeLoopEnd;
    }
}

//==============================================================================
processor HarmonicMix (int size = 64)
{
    input event float mixIn       [[ name: "Odd/Even mix",                min: 0,       max: 100,    init: 50,    unit: "%",   step: 1   ]];
    input event float slopeIn     [[ name: "Harmonic Attenuation",        min: -1,       max: 1,    init: 0,    unit: "db",   step: 0.01   ]];
    output event float<size> mixOut;

    float mixInVal, slopeInVal;

    event mixIn (float f)
    {
        mixInVal = f;
        updateHarmonicMix();
    }

    event slopeIn (float f)
    {
        slopeInVal = f;
        updateHarmonicMix();
    }

    void updateHarmonicMix()
    {
        float<size> harmonicMix;

        float oddMultiplier = mixInVal * 0.01f;
        float evenMultiplier = 1.0f - oddMultiplier;

        float slopeModifierDbChange = slopeInVal;
        float slopeModifierDb = 0;

        for (wrap<size> i)
        {
            float v = (int (i) % 2 == 0) ? evenMultiplier : oddMultiplier;

            v *= soul::dBtoGain (slopeModifierDb);
            slopeModifierDb += slopeModifierDbChange;

            harmonicMix[i] = v;
        }

        mixOut << harmonicMix;
    }
}

//==============================================================================
graph Voice
{
    input event
    {
        soul::note_events::NoteOn noteOn;
        soul::note_events::NoteOff noteOff;
        soul::note_events::PitchBend pitchBend;
    }

    input amplitudeSource.hamonicMix;
    input amplitudeSource.envelopeRate;
    input amplitudeSource.envelopeLoopStart;
    input amplitudeSource.envelopeLoopEnd;

    output stream float audioOut;

    let
    {
        osc = OscillatorBank (${HARMONICS});
        amplitudeSource = AmplitudeSource (${HARMONICS}, ${FRAMES_BETWEEN_SAMPLES});
        declickEnvelope = soul::envelope::FixedAttackReleaseEnvelope (0.2f, 0.02f, 0.1f);
        attenuator = soul::gain::DynamicGain (float);
    }

    connection
    {
        noteOn          -> osc.noteOn, amplitudeSource.noteOn;
        pitchBend       -> osc.pitchBend;
        noteOn, noteOff -> declickEnvelope.noteIn;

        amplitudeSource.out         -> osc.amplitudes;
        osc.audioOut                -> attenuator.in;
        declickEnvelope.levelOut    -> attenuator.gain;
        attenuator                  -> audioOut;
    }
}


//==============================================================================
processor OscillatorBank (int size = 64)
{
    input event
    {
        soul::note_events::NoteOn noteOn;
        soul::note_events::PitchBend pitchBend;
    }

    input stream float<size> amplitudes;

    output stream float audioOut;

    event noteOn (soul::note_events::NoteOn e)
    {
        notePitch = e.note;
        bendSemitones = 0.0f;
        oscillators = 1.0f;
        setMultipliers();
    }

    event pitchBend (soul::note_events::PitchBend e)
    {
        bendSemitones = e.bendSemitones;
        setMultipliers();
    }

    float notePitch, bendSemitones;

    void setMultipliers()
    {
        let noteFrequency  = soul::noteNumberToFrequency (notePitch + bendSemitones);

        let nyquist = float (processor.frequency / 2.0);

        for (wrap<size> i)
        {
            let harmonicFrequency = noteFrequency * (int (i) + 1);

            if (harmonicFrequency < nyquist)
            {
                let angle = float32 (twoPi * harmonicFrequency * processor.period);
                multiplier[i].real = cos (angle);
                multiplier[i].imag = sin (angle);
            }
            else
            {
                multiplier[i] = 1.0f;
            }
        }
    }

    complex32<size> oscillators = 1.0f, multiplier = 1.0f;

    void run()
    {
        loop
        {
            oscillators = oscillators * multiplier;

            if const (size == 1)
                audioOut << oscillators.imag * amplitudes;
            else
                audioOut << sum (oscillators.imag * amplitudes);

            advance();
        }
    }
}


//==============================================================================
processor AmplitudeSource (int size = 64, int stepRate = 1024)
{
    input event soul::note_events::NoteOn noteOn;
    input event float<size> hamonicMix;
    input event float envelopeRate;
    input event float envelopeLoopStart, envelopeLoopEnd;

    output stream float<size> out;

    float<size>[] amplitudes = (
${AMPLITUDES}
    );

    float<size> multiplier = 1.0f;

    event noteOn (soul::note_events::NoteOn e)
    {
        steps = int (stepRate * envelopeRateMultiplier);
        value = amplitudes[0] * multiplier;
        increment = multiplier * (amplitudes[1] - amplitudes[0]) / float<size> (steps);
        nextSlot = 1;
    }

    event hamonicMix (float<size> f)
    {
        multiplier = f;
    }

    event envelopeRate (float f)
    {
        envelopeRateMultiplier = 1.0f / f;
    }

    event envelopeLoopStart (float f)
    {
        envelopeLoopStartSlot = int (amplitudes.size * f);
    }

    event envelopeLoopEnd (float f)
    {
        envelopeLoopEndSlot = int (amplitudes.size * f);
    }

    void next()
    {
        if (nextSlot >= envelopeLoopEndSlot)
            nextSlot = envelopeLoopStartSlot - 1;

        steps = int (stepRate * envelopeRateMultiplier);
        value = multiplier * amplitudes.at (nextSlot);
        increment = multiplier * (amplitudes.at (nextSlot + 1) - amplitudes.at (nextSlot)) / float<size> (steps);
        nextSlot++;
    }

    float<size> value, increment;
    int nextSlot;
    int steps;
    float envelopeRateMultiplier;
    int envelopeLoopStartSlot, envelopeLoopEndSlot;

    void run()
    {
        loop
        {
            out << value;
            value += increment;
            steps--;

            if (steps == 0)
                next();

            advance();
        }
    }
}
